6 BCOS 2 - ADCs, Interrupts and PWM
6.1 Overview
6.1.1 Design overview
Many embedded systems rely on the use of analog devices for various reasons. Certain sensors,
for example, output an analog voltage or current which the digital brain of the system needs
to be able to read. Similarly, embedded devices often allow users to adjust parameters by
turning the knob of a rotary potentiometer. In order to be able to process these analog signals
we need to make use of an Analog to Digital Convertor, or ADC for short.
Embedded systems typically also have functionalities that have to happen at precise times,
such as when a button is pressed. In simple cases, polling a GPIO register and waiting for a
bit to change is often enough, but as complexity increases this approach becomes less useful.
Think of an E-stop on a dangerous bit of machinery, for example. We would want the system
to shut down as soon as the E-stop is pressed. With polling, the system would only be shut
down once the lines to poll the GPIO pins are executed, wasting what could be valuable
milliseconds if things go wrong. So, interrupts are used instead. By now you should already
be familiar with interrupts, and this practical will guide you through setting up interrupts
for the GPIO peripheral on the STM32.
In this prac, I will be using C to read the voltage on a potentiometers wiper using the
onboard ADC on the STM32. I will then use that to calculate the duty cycle of a PWM
signal which will be used to control the brightness of the blue built-in LED. I will also use
interrupts to control when certain events occur.
All of the code needed to initialize the peripherals used in this practical is automatically
generated by STMCubeIDE using the .ioc file. If you want to see how these peripherals were
configured, you can open up the configuration GUI by double-clicking on the .ioc file included
in the project folder.


